#!/usr/bin/env bash
#
# Calls scripts in a users home directory that currently has an active X
# session.  Intended to be called by `zzz`.
#
# Author: Dave Eddy <dave@daveeddy.com>
# Date: September 07, 2018
# License: MIT

# Must be set by the caller, should be 'suspend' or 'resume'.
mode=$1

# Timeout used by timeout(1) for user script.  This is to ensure a user-script
# can't hang the system indefinitely when suspending or resuming.
timeout='5s'

# Regex for display number
num_re='^[0-9]+$'

# Print a log line
msg() {
	echo '[user-script]' "$@"
}

# Print an error and die
fatal() {
	msg '[error]' "$@" >&2
	exit 1
}

msg "called $(date)"

# Get the username, home directory, and DISPLAY number of the currently logged
# in user with an X session.
#
# This logic is fairly dumb: it will stop at the first display found, and give
# up easily if anything is awry.
#
# This should probably be extended to support multiply displays and multiple
# users... but for now this gets the job done for a single user workstation.
found=false
for sock in /tmp/.X11-unix/X*; do
	# socket group is the user that owns the session
	user=$(stat --printf '%G' "$sock")
	[[ -n $user ]] || fatal "failed to find owner (group) of $sock"

	# get the users home directory
	# This is really broken - I'm doing nothing to ensure socket matches owner in ConsoleKit
	# However, I do enforce user matches for processing below - it reports only one user; this should be looped
	# I can't trust the socket owner because it's owned by root with my Cinnamon/lxdm config
	userid=$(ck-list-sessions  | awk '/unix-user/ {print $3}' | head -1 | sed "s/'//g")
	user=$(getent passwd "$userid" | cut -d: -f1)
	home=$(getent passwd "$userid" | cut -d: -f6)
	[[ -n $home && -d $home ]] || \
	    fatal "failed to find user $user home directory"

	[[ -e $home/.Xauthority ]] || \
	    fatal "failed to find Xauthority file for user $user"

	# extract the display number
	display=${sock##*/}
	display=${display#X}
	[[ $display =~ $num_re ]] || \
	    fatal "invalid display number found: '$display'"

	found=true
	break
done

# ensure we have something
$found || fatal 'failed to find an active X session'

# figure out what script to run
case "$mode" in
	suspend) script=$home/.onsuspend;;
	resume) script=$home/.onresume;;
	'') fatal 'mode must be specified as the first argument';;
	*) fatal "invalid mode specified: '$mode'";;
esac
[[ -x $script ]] || fatal "script $script not found or executable"

# run the script
msg "running $script for user $user (DISPLAY=:$display)"
sudo -Hu "$user" "DISPLAY=:$display" timeout "$timeout" "$script"
msg "ran $script for user $user, exited $?"
